{
  "swagger": "2.0",
  "info": {
    "title": "API | DevinSales",
    "description": "Estas é a documentação para as desenvolvedores que utilizaram nossa API.",
    "version": "1.0.0"
  },
  "host": "localhost:3333",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "securityDefinitions": {
    "bearerAuth": {
      "type": "apiKey",
      "name": "authorization",
      "in": "header"
    }
  },
  "paths": {
    "/api/v1/users": {
      "post": {
        "tags": [
          "Usuário"
        ],
        "description": "Endpoint que criar um novo usuário.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "example": "any"
                },
                "password": {
                  "example": "any"
                },
                "email": {
                  "example": "any"
                },
                "birth_date": {
                  "example": "any"
                },
                "roles": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "get": {
        "tags": [
          "Usuário"
        ],
        "description": "Endpoint para buscar todos os usuários do banco de dados.",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "type": "string"
          },
          {
            "name": "birth_date_min",
            "in": "query",
            "type": "string"
          },
          {
            "name": "birth_date_max",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/v1/session": {
      "post": {
        "tags": [
          "Usuário"
        ],
        "description": "Endpoint para login do usuário, quando email e senha são validos retorna um token.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "example": "any"
                },
                "password": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/api/v1/user/{user_id}": {
      "delete": {
        "description": "",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/roles": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "description": {
                  "example": "any"
                },
                "permissions": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/api/v1/permissions": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "description": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/api/v1/user/{id}/sales": {
      "get": {
        "tags": [
          " Vendas "
        ],
        "description": "Endpoint pra buscar as vendas do usuario.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/v1/sales/{sale_id}/": {
      "get": {
        "tags": [
          "Vendas"
        ],
        "summary": "Pega uma venda por seu ID",
        "description": "Endpoint pra buscar uma venda específica retornando id do vendedor, id do comprador como também o produto junto com sua quantidade, preço do item e o total .",
        "parameters": [
          {
            "name": "sale_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "minimum": 1
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Não existe venda para este ID"
          },
          "500": {
            "description": "Error"
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "É necessário passar o ID de vendas"
          }
        }
      }
    },
    "/api/v1/user/{user_id}/buy": {
      "get": {
        "tags": [
          "Vendas"
        ],
        "description": "Endpoint pra buscar as vendas do usuario pelo buyer_id.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/v1/sales/{seller_id}/saleMade": {
      "post": {
        "tags": [
          "Vendas"
        ],
        "description": "<h2>Endpoint for submitting sales</h2>",
        "parameters": [
          {
            "name": "seller_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "<ul><li>It must be a valid seller_id</li></ul>"
          },
          {
            "name": "obj",
            "in": "body",
            "description": "<h4>product_id</h4><ul><li>It must be a valid product_id</li></ul><h4>unit_price</h4><ul><li>If no value is sent it will get the default value of product</li><li>The value must be greater than 0</li></ul><h4>amount</h4><ul><li>If no value is sent it will be considered equal to 1</li><li>The value must be greater than 0</li></ul>",
            "schema": {
              "type": "object",
              "properties": {
                "product_id": {
                  "type": "string",
                  "example": "Integer"
                },
                "unit_price": {
                  "type": "string",
                  "example": "Integer"
                },
                "amount": {
                  "type": "string",
                  "example": "Integer"
                }
              },
              "required": [
                "product_id"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Sale submitted successfully."
          },
          "403": {
            "description": "The user logged-in is unauthorized to submit sales."
          },
          "404": {
            "description": "product_id or seller_id were not found in the database."
          }
        }
      }
    },
    "/api/v1/user/{user_id}/sales": {
      "post": {
        "tags": [
          "Vendas"
        ],
        "description": "Endpoint para criar uma venda.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "buyer_id": {
                  "example": "any"
                },
                "dt_sale": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/user/{seller_id}/item": {
      "post": {
        "tags": [
          "Sales"
        ],
        "description": "nao sei o que ele faz.",
        "parameters": [
          {
            "name": "seller_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "product_id": {
                  "example": "any"
                },
                "unit_price": {
                  "example": "any"
                },
                "amount": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/products/{id}": {
      "delete": {
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    
    "/api/v1/address": {
      "get": {
        "tags": [
          "Endereços"
        ],
        "description": "Endpoint que retorna os endereços com base nos dados fornecidos via query, ou então todos os endereços caso nenhuma query seja passada",
        "parameters": [
          {
            "name": "city_id",
            "in": "query",
            "description": "query para buscar produtos pelo nome",
            "required": false,
            "type": "string"
          },
          {
            "name": "street",
            "in": "query",
            "description": "query para buscar produtos pelo preço mínimo",
            "required": false,
            "type": "number"
          },
          {
            "name": "cep",
            "in": "query",
            "description": "query para buscar produtos pelo preço máximo",
            "required": false,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Produtos:",
            "schema": {
              "$ref": "#/definitions/GetProduct"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "r04": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/address/{address_id}": {
      "delete": {
        "tags": [
          "Endereços"
        ],
        "description": "Endpoint para deletar endereço cadastrado. O id do endereço deve ser enviado por params",
        "parameters": [
          {
            "name": "address_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "r04": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/states": {
      "get": {
        "tags": [
          "Estado"
        ],
        "description": "Endpoint que retorna os estados com base no nome fornecido via query, ou então todos os estados caso nenhuma query seja passada",
      
        
        "parameters": [
          {
            "name": "obj",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddProduct"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Produto criado com sucesso!",
            "schema": {
              "$ref": "#/definitions/ResProduct"
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/state/{state_id}/city/{city_id}": {
      "get": {
        "tags": [
          "State"
        ],
        "description": "Endpoint para atualizar todos as propriedades de um produto. Neste endpoint o usuário logado deve ter permissão de UPDATE.",
        "parameters": [
          {
            "name": "state_id",
            "in": "path",
            "required": true,
            "type": "number",
            "description": "parâmetro id para buscar um produto para atualização"
          },
          {
            "name": "city_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/state/{state_id}": {
      "get": {
        "tags": [
          "Estado"
        ],
        "description": "Endpoint que retorna um estado de acordo com o state_id fornecido",
        "parameters": [
          {
            "name": "state_id",
            "in": "path",
            "required": true,
            "type": "number",
            "description": "parâmetro id para buscar um produto para deleção"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  },
  "definitions": {
    "AddProduct": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "MacBook Air"
        },
        "suggested_price": {
          "type": "number",
          "example": 7999.99
        }
      }
    },
    "ResProduct": {
      "type": "object",
      "properties": {
        "nome": {
          "type": "string",
          "example": "MacBook Air"
        },
        "preço_sugerido": {
          "type": "number",
          "example": 7999.99
        }
      }
    },
    "GetProduct": {
      "type": "object",
      "properties": {
        "Products": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "example": 2
              },
              "name": {
                "type": "string",
                "example": "MacBook Pro"
              },
              "suggested_price": {
                "type": "number",
                "example": 10999.99
              }
            }
          }
        }
      }
    },
    "PutProduct": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Ipad Air"
        },
        "suggested_price": {
          "type": "number",
          "example": 4999.99
        }
      }
    },
    "PatchProduct": {
      "type": "object",
      "properties": {
        "suggested_price": {
          "type": "number",
          "example": 3999.99
        }
      }

    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}